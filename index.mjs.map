{"version":3,"file":"index.mjs","sources":["../lib/nd_accessors.js","../lib/nd.js","../lib/main.js","../lib/0d.js","../lib/1d.js","../lib/2d.js","../lib/3d.js","../lib/4d.js","../lib/5d.js","../lib/6d.js","../lib/7d.js","../lib/8d.js","../lib/9d.js","../lib/10d.js","../lib/0d_accessors.js","../lib/1d_accessors.js","../lib/2d_accessors.js","../lib/3d_accessors.js","../lib/4d_accessors.js","../lib/5d_accessors.js","../lib/6d_accessors.js","../lib/7d_accessors.js","../lib/8d_accessors.js","../lib/9d_accessors.js","../lib/10d_accessors.js","../lib/2d_blocked.js","../lib/3d_blocked.js","../lib/4d_blocked.js","../lib/5d_blocked.js","../lib/6d_blocked.js","../lib/7d_blocked.js","../lib/8d_blocked.js","../lib/9d_blocked.js","../lib/10d_blocked.js","../lib/2d_blocked_accessors.js","../lib/3d_blocked_accessors.js","../lib/4d_blocked_accessors.js","../lib/5d_blocked_accessors.js","../lib/6d_blocked_accessors.js","../lib/7d_blocked_accessors.js","../lib/8d_blocked_accessors.js","../lib/9d_blocked_accessors.js","../lib/10d_blocked_accessors.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport ind2sub from '@stdlib/ndarray-base-ind2sub';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIfnd( x, predicate );\n* // returns 3\n*/\nfunction countIfnd( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar ordx;\n\tvar idx;\n\tvar len;\n\tvar get;\n\tvar sh;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache a reference to the input ndarray data buffer:\n\txbuf = x.data;\n\n\t// Cache a reference to the stride array:\n\tsx = x.strides;\n\n\t// Cache the index of the first indexed element:\n\tox = x.offset;\n\n\t// Cache the array order:\n\tordx = x.order;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tidx = ind2sub( sh, sx, 0, ordx, i, MODE ); // return subscripts from the perspective of the ndarray view\n\t\tif ( predicate.call( thisArg, get( xbuf, ix ), idx, x.ref ) ) {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIfnd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport ind2sub from '@stdlib/ndarray-base-ind2sub';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIfnd( x, predicate );\n* // returns 3\n*/\nfunction countIfnd( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar ordx;\n\tvar idx;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache a reference to the input ndarray data buffer:\n\txbuf = x.data;\n\n\t// Cache a reference to the stride array:\n\tsx = x.strides;\n\n\t// Cache the index of the first indexed element:\n\tox = x.offset;\n\n\t// Cache the array order:\n\tordx = x.order;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tidx = ind2sub( sh, sx, 0, ordx, i, MODE ); // return subscripts from the perspective of the ndarray view\n\t\tif ( predicate.call( thisArg, xbuf[ ix ], idx, x.ref ) ) {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIfnd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport ndarray2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport numel from '@stdlib/ndarray-base-numel';\nimport blockedaccessorcount2d from './2d_blocked_accessors.js';\nimport blockedaccessorcount3d from './3d_blocked_accessors.js';\nimport blockedaccessorcount4d from './4d_blocked_accessors.js';\nimport blockedaccessorcount5d from './5d_blocked_accessors.js';\nimport blockedaccessorcount6d from './6d_blocked_accessors.js';\nimport blockedaccessorcount7d from './7d_blocked_accessors.js';\nimport blockedaccessorcount8d from './8d_blocked_accessors.js';\nimport blockedaccessorcount9d from './9d_blocked_accessors.js';\nimport blockedaccessorcount10d from './10d_blocked_accessors.js';\nimport blockedcount2d from './2d_blocked.js';\nimport blockedcount3d from './3d_blocked.js';\nimport blockedcount4d from './4d_blocked.js';\nimport blockedcount5d from './5d_blocked.js';\nimport blockedcount6d from './6d_blocked.js';\nimport blockedcount7d from './7d_blocked.js';\nimport blockedcount8d from './8d_blocked.js';\nimport blockedcount9d from './9d_blocked.js';\nimport blockedcount10d from './10d_blocked.js';\nimport accessorcount0d from './0d_accessors.js';\nimport accessorcount1d from './1d_accessors.js';\nimport accessorcount2d from './2d_accessors.js';\nimport accessorcount3d from './3d_accessors.js';\nimport accessorcount4d from './4d_accessors.js';\nimport accessorcount5d from './5d_accessors.js';\nimport accessorcount6d from './6d_accessors.js';\nimport accessorcount7d from './7d_accessors.js';\nimport accessorcount8d from './8d_accessors.js';\nimport accessorcount9d from './9d_accessors.js';\nimport accessorcount10d from './10d_accessors.js';\nimport accessorcountnd from './nd_accessors.js';\nimport count0d from './0d.js';\nimport count1d from './1d.js';\nimport count2d from './2d.js';\nimport count3d from './3d.js';\nimport count4d from './4d.js';\nimport count5d from './5d.js';\nimport count6d from './6d.js';\nimport count7d from './7d.js';\nimport count8d from './8d.js';\nimport count9d from './9d.js';\nimport count10d from './10d.js';\nimport countnd from './nd.js';\n\n\n// VARIABLES //\n\nvar COUNT = [\n\tcount0d,\n\tcount1d,\n\tcount2d,\n\tcount3d,\n\tcount4d,\n\tcount5d,\n\tcount6d,\n\tcount7d,\n\tcount8d,\n\tcount9d,\n\tcount10d\n];\nvar ACCESSOR_COUNT = [\n\taccessorcount0d,\n\taccessorcount1d,\n\taccessorcount2d,\n\taccessorcount3d,\n\taccessorcount4d,\n\taccessorcount5d,\n\taccessorcount6d,\n\taccessorcount7d,\n\taccessorcount8d,\n\taccessorcount9d,\n\taccessorcount10d\n];\nvar BLOCKED_COUNT = [\n\tblockedcount2d, // 0\n\tblockedcount3d,\n\tblockedcount4d,\n\tblockedcount5d,\n\tblockedcount6d,\n\tblockedcount7d,\n\tblockedcount8d,\n\tblockedcount9d,\n\tblockedcount10d // 8\n];\nvar BLOCKED_ACCESSOR_COUNT = [\n\tblockedaccessorcount2d, // 0\n\tblockedaccessorcount3d,\n\tblockedaccessorcount4d,\n\tblockedaccessorcount5d,\n\tblockedaccessorcount6d,\n\tblockedaccessorcount7d,\n\tblockedaccessorcount8d,\n\tblockedaccessorcount9d,\n\tblockedaccessorcount10d // 8\n];\nvar MAX_DIMS = COUNT.length - 1;\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* ## Notes\n*\n* -   A provided ndarray should be an object with the following properties:\n*\n*     -   **dtype**: data type.\n*     -   **data**: data buffer.\n*     -   **shape**: dimensions.\n*     -   **strides**: stride lengths.\n*     -   **offset**: index offset.\n*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing one input array\n* @param {Function} predicate - predicate function\n* @param {thisArg} [thisArg] - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf( [ x ], predicate );\n* // returns 5\n*/\nfunction countIf( arrays, predicate, thisArg ) {\n\tvar ndims;\n\tvar shx;\n\tvar x;\n\n\t// Unpack the ndarray and standardize ndarray meta data:\n\tx = ndarray2object( arrays[ 0 ] );\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Determine whether we can avoid iteration altogether...\n\tif ( ndims === 0 ) {\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn ACCESSOR_COUNT[ ndims ]( x, predicate, thisArg );\n\t\t}\n\t\treturn COUNT[ ndims ]( x, predicate, thisArg );\n\t}\n\t// Check whether we were provided an empty ndarray...\n\tif ( numel( shx ) === 0 ) {\n\t\treturn true;\n\t}\n\t// Determine whether we can avoid blocked iteration...\n\tif ( ndims <= MAX_DIMS && iterationOrder( x.strides ) !== 0 ) {\n\t\t// So long as iteration always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn ACCESSOR_COUNT[ ndims ]( x, predicate, thisArg );\n\t\t}\n\t\treturn COUNT[ ndims ]( x, predicate, thisArg );\n\t}\n\t// Determine whether we can perform blocked iteration...\n\tif ( ndims <= MAX_DIMS ) {\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_COUNT[ ndims-2 ]( x, predicate, thisArg );\n\t\t}\n\t\treturn BLOCKED_COUNT[ ndims-2 ]( x, predicate, thisArg );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( x.accessorProtocol ) {\n\t\treturn accessorcountnd( x, predicate, thisArg );\n\t}\n\treturn countnd( x, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default countIf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf0d( x, predicate );\n* // returns 1\n*/\nfunction countIf0d( x, predicate, thisArg ) {\n\tif ( predicate.call( thisArg, x.data[ x.offset ], [], x.ref ) ) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\n// EXPORTS //\n\nexport default countIf0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 2 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf1d( x, predicate );\n* // returns 3\n*/\nfunction countIf1d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar dx0;\n\tvar S0;\n\tvar ix;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments:\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tif ( predicate.call( thisArg, xbuf[ ix ], [ i0 ], x.ref ) ) {\n\t\t\tcount += 1;\n\t\t}\n\t\tix += dx0;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf2d( x, predicate );\n* // returns 3\n*/\nfunction countIf2d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf3d( x, predicate );\n* // returns 5\n*/\nfunction countIf3d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\tcount += 1;\n\t\t\t\t}\n\t\t\t\tix += dx0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t}\n\t\tix += dx2;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf4d( x, predicate );\n* // returns 5\n*/\nfunction countIf4d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t}\n\t\tix += dx3;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf5d( x, predicate );\n* // returns 5\n*/\nfunction countIf5d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t}\n\t\tix += dx4;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf6d( x, predicate );\n* // returns 5\n*/\nfunction countIf6d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ i5, i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t}\n\t\tix += dx5;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf7d( x, predicate );\n* // returns 5\n*/\nfunction countIf7d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ i6, i5, i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t}\n\t\tix += dx6;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf8d( x, predicate );\n* // returns 5\n*/\nfunction countIf8d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t}\n\t\tix += dx7;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf9d( x, predicate );\n* // returns 5\n*/\nfunction countIf9d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t}\n\t\tix += dx8;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = countIf10d( x, predicate );\n* // returns 5\n*/\nfunction countIf10d( x, predicate, thisArg ) { // eslint-disable-line max-statements\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ i9, i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t}\n\t\tix += dx9;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf0d( x, predicate );\n* // returns 1\n*/\nfunction countIf0d( x, predicate, thisArg ) {\n\tif ( predicate.call( thisArg, x.accessors[ 0 ]( x.data, x.offset ), [], x.ref ) ) { // eslint-disable-line max-len\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\n// EXPORTS //\n\nexport default countIf0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 2 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf1d( x, predicate );\n* // returns 3\n*/\nfunction countIf1d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar S0;\n\tvar ix;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tif ( predicate.call( thisArg, get( xbuf, ix ), [ i0 ], x.ref) ) {\n\t\t\tcount += 1;\n\t\t}\n\t\tix += dx0;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf2d( x, predicate );\n* // returns 3\n*/\nfunction countIf2d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf3d( x, predicate );\n* // returns 7\n*/\nfunction countIf3d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\tcount += 1;\n\t\t\t\t}\n\t\t\t\tix += dx0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t}\n\t\tix += dx2;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf4d( x, predicate );\n* // returns 7\n*/\nfunction countIf4d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t}\n\t\tix += dx3;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf5d( x, predicate );\n* // returns 7\n*/\nfunction countIf5d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t}\n\t\tix += dx4;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf6d( x, predicate );\n* // returns 7\n*/\nfunction countIf6d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ i5, i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t}\n\t\tix += dx5;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf7d( x, predicate );\n* // returns 7\n*/\nfunction countIf7d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ i6, i5, i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t}\n\t\tix += dx6;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf8d( x, predicate );\n* // returns 7\n*/\nfunction countIf8d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t}\n\t\tix += dx7;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf9d( x, predicate );\n* // returns 7\n*/\nfunction countIf9d( x, predicate, thisArg ) {\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t}\n\t\tix += dx8;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport reverse from '@stdlib/array-base-reverse';\nimport take from '@stdlib/array-base-take-indexed';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = countIf10d( x, predicate );\n* // returns 7\n*/\nfunction countIf10d( x, predicate, thisArg ) { // eslint-disable-line max-statements\n\tvar count;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tidx = zeroTo( sh.length );\n\tif ( strides2order( sx ) === 1 ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tidx = reverse( idx );\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ i9, i8, i7, i6, i5, i4, i3, i2, i1, i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t}\n\t\tix += dx9;\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default countIf10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf2d( x, predicate );\n* // returns 3\n*/\nfunction blockedCountIf2d( x, predicate, thisArg ) {\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar ox1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t// Compute the loop offset increment:\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ j1+i1, j0+i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf3d( x, predicate );\n* // returns 5\n*/\nfunction blockedCountIf3d( x, predicate, thisArg ) {\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar ox1;\n\tvar ox2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t// Compute the loop offset increment:\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf4d( x, predicate );\n* // returns 5\n*/\nfunction blockedCountIf4d( x, predicate, thisArg ) {\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf5d( x, predicate );\n* // returns 5\n*/\nfunction blockedCountIf5d( x, predicate, thisArg ) {\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf6d( x, predicate );\n* // returns 5\n*/\nfunction blockedCountIf6d( x, predicate, thisArg ) { // eslint-disable-line max-statements\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf7d( x, predicate );\n* // returns 5\n*/\nfunction blockedCountIf7d( x, predicate, thisArg ) { // eslint-disable-line max-statements\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf8d( x, predicate );\n* // returns 5\n*/\nfunction blockedCountIf8d( x, predicate, thisArg ) { // eslint-disable-line max-statements\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf9d( x, predicate );\n* // returns 5\n*/\nfunction blockedCountIf9d( x, predicate, thisArg ) { // eslint-disable-line max-statements\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf10d( x, predicate );\n* // returns 5\n*/\nfunction blockedCountIf10d( x, predicate, thisArg ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, xbuf[ ix ], take( [ j9+i9, j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf2d( x, predicate );\n* // returns 3\n*/\nfunction blockedCountIf2d( x, predicate, thisArg ) {\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar ox1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t// Compute the loop offset increment:\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ j1+i1, j0+i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf3d( x, predicate );\n* // returns 7\n*/\nfunction blockedCountIf3d( x, predicate, thisArg ) {\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar ox1;\n\tvar ox2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t// Compute the loop offset increment:\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf4d( x, predicate );\n* // returns 7\n*/\nfunction blockedCountIf4d( x, predicate, thisArg ) {\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf5d( x, predicate );\n* // returns 7\n*/\nfunction blockedCountIf5d( x, predicate, thisArg ) {\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf6d( x, predicate );\n* // returns 7\n*/\nfunction blockedCountIf6d( x, predicate, thisArg ) { // eslint-disable-line max-statements\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf7d( x, predicate );\n* // returns 7\n*/\nfunction blockedCountIf7d( x, predicate, thisArg ) { // eslint-disable-line max-statements\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf8d( x, predicate );\n* // returns 7\n*/\nfunction blockedCountIf8d( x, predicate, thisArg ) { // eslint-disable-line max-statements\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf9d( x, predicate );\n* // returns 7\n*/\nfunction blockedCountIf9d( x, predicate, thisArg ) { // eslint-disable-line max-statements\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\nimport take from '@stdlib/array-base-take-indexed';\nimport reverse from '@stdlib/array-base-reverse';\n\n\n// MAIN //\n\n/**\n* Counts the number of elements in an ndarray which pass a test implemented by a predicate function via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {ndarrayLike} x.ref - reference to the original ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - predicate function execution context\n* @returns {integer} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function predicate( value ) {\n*    return value > 0.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 8, 4, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'ref': null,\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform operation:\n* var out = blockedCountIf10d( x, predicate );\n* // returns 7\n*/\nfunction blockedCountIf10d( x, predicate, thisArg ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar count;\n\tvar bsize;\n\tvar xbuf;\n\tvar idx;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tidx = reverse( o.idx );\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Initialize a counter:\n\tcount = 0;\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( predicate.call( thisArg, get( xbuf, ix ), take( [ j9+i9, j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], idx ), x.ref ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default blockedCountIf10d;\n"],"names":["MODE","COUNT","x","predicate","thisArg","call","data","offset","ref","count","xbuf","dx0","S0","ix","i0","shape","strides","idx","dx1","sh","S1","sx","i1","zeroTo","length","strides2order","reverse","take","dx2","S2","i2","dx3","S3","i3","dx4","S4","i4","dx5","S5","i5","dx6","S6","i6","dx7","S7","i7","dx8","S8","i8","dx9","S9","i9","ACCESSOR_COUNT","accessors","get","BLOCKED_COUNT","bsize","ox1","s0","s1","ox","j0","j1","o","loopOrder","blockSize","dtype","ox2","s2","j2","ox3","s3","j3","ox4","s4","j4","ox5","s5","j5","ox6","s6","j6","ox7","s7","j7","ox8","s8","j8","ox9","s9","j9","BLOCKED_ACCESSOR_COUNT","MAX_DIMS","countIf","arrays","ndims","shx","ndarray2object","accessorProtocol","numel","iterationOrder","ordx","len","i","order","vind2bind","ind2sub","accessorcountnd","countnd"],"mappings":"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"}